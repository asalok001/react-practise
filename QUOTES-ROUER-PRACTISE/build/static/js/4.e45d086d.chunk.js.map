{"version":3,"sources":["components/quotes/HighlightedQuote.module.css","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.js","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","pages/QuoteDetail.js"],"names":["module","exports","HighlightedQuote","props","className","classes","quote","text","author","NewCommentForm","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","quoteId","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","quoteID","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","QuoteDetail","params","getSingleQuote","loadedQuote","path","exact","to"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,MAAQ,kC,mBCA1BD,EAAOC,QAAU,CAAC,SAAW,6B,mBCA7BD,EAAOC,QAAU,CAAC,KAAO,6BAA6B,QAAU,gCAAgC,QAAU,gCAAgC,QAAU,kC,mBCApJD,EAAOC,QAAU,CAAC,KAAO,4B,mBCAzBD,EAAOC,QAAU,CAAC,SAAW,iC,wFCUdC,EATU,SAACC,GACxB,OACE,yBAAQC,UAAWC,IAAQC,MAA3B,UACE,4BAAIH,EAAMI,OACV,qCAAaJ,EAAMK,a,kEC4CVC,EA1CQ,SAACN,GACtB,IAAMO,EAAiBC,mBAMvB,EAAuCC,YAAQC,KAAvCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAQC,EAA7B,EAA6BA,MAErBC,EAAmBd,EAAnBc,eAERC,qBAAU,WACO,cAAXH,GAA2BC,GAC7BC,MAED,CAACF,EAAQC,EAAOC,IAEnB,IAAME,EAAoB,SAACC,GACzBA,EAAMC,iBACN,IAAMC,EAAcZ,EAAea,QAAQC,MAE3CV,EAAY,CAAEW,YAAa,CAAElB,KAAMe,GAAeI,QAASvB,EAAMuB,WAInE,OACE,uBAAMtB,UAAWC,IAAQsB,KAAMC,SAAUT,EAAzC,UACc,YAAXJ,GACC,qBAAKX,UAAU,WAAf,SACE,cAACyB,EAAA,EAAD,MAEJ,sBAAKzB,UAAWC,IAAQyB,QAASF,SAAUT,EAA3C,UACE,uBAAOY,QAAQ,UAAf,0BACA,0BAAUC,GAAG,UAAUC,KAAK,IAAIC,IAAKxB,OAEvC,qBAAKN,UAAWC,IAAQ8B,QAAxB,SACE,wBAAQ/B,UAAU,MAAlB,+B,iBClCOgC,EARK,SAACjC,GACnB,OACE,oBAAIC,UAAWC,IAAQgC,KAAvB,SACE,4BAAIlC,EAAMI,U,iBCQD+B,EAVM,SAACnC,GACpB,OACE,oBAAIC,UAAWC,IAAQkC,SAAvB,SACGpC,EAAMoC,SAASC,KAAI,SAACC,GAAD,OAClB,cAAC,EAAD,CAA8BlC,KAAMkC,EAAQlC,MAA1BkC,EAAQT,UCmEnBU,EAhEE,WACf,MAA8CC,oBAAS,GAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KAGQC,EAFOC,cAEPD,QAER,EAAsDlC,YAAQoC,KAAtDlC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAckC,EAAnC,EAA6BC,KAE7BhC,qBACE,WACEJ,EAAYgC,KAEd,CAACA,EAAShC,IAGZ,IAWIyB,EAPEY,EAAsBC,uBAC1B,WACEtC,EAAYgC,KAEd,CAAChC,EAAagC,IAyBhB,MApBe,YAAX/B,IACFwB,EACE,qBAAKnC,UAAU,WAAf,SACE,cAACyB,EAAA,EAAD,OAMO,cAAXd,GACEkC,GAA4C,IAA1BA,EAAeI,SAEnCd,EAAW,mBAAGnC,UAAU,WAAb,iCAGE,cAAXW,IAA2BkC,GAAkBA,EAAeI,OAAS,KACvEd,EAAW,cAAC,EAAD,CAAcA,SAAUU,KAKnC,0BAAS7C,UAAWC,IAAQkC,SAA5B,UACE,gDACEK,GACA,wBAAQxC,UAAU,MAAMkD,QArCC,WAC7BT,GAAmB,IAoCf,2BAIDD,GACC,cAAC,EAAD,CAAgBE,QAASA,EAAS7B,eAAgBkC,IAEnDZ,MCfQgB,UAxCK,WAChB,IAAMC,EAAST,cAGPrB,EAAY8B,EAAZ9B,QAER,EAA0Dd,YAAQ6C,KAAgB,GAA1E3C,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAc2C,EAAnC,EAA6BR,KAAmBlC,EAAhD,EAAgDA,MAMhD,OAJAE,qBAAU,WACNJ,EAAYY,KACb,CAACZ,EAAaY,IAEF,YAAXX,EACQ,qBAAKX,UAAU,WAAf,SAA0B,cAACyB,EAAA,EAAD,MAGlCb,EACO,oBAAGZ,UAAU,WAAb,cAA0BY,KAEhC0C,EAAYnD,KAKb,eAAC,WAAD,WACI,cAAC,EAAD,CAAkBC,OAAQkD,EAAYlD,OAAQD,KAAMmD,EAAYnD,OAChE,cAAC,IAAD,CAAOoD,KAAI,iBAAYH,EAAO9B,SAAWkC,OAAK,EAA9C,SACI,qBAAKxD,UAAU,WAAf,SACI,cAAC,IAAD,CAAMA,UAAU,YAAYyD,GAAE,iBAAYL,EAAO9B,QAAnB,aAA9B,+BAMR,cAAC,IAAD,CAAOiC,KAAI,iBAAYH,EAAO9B,QAAnB,aAAX,SACI,cAAC,EAAD,SAfD","file":"static/js/4.e45d086d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__tpjaa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__3Gd7W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2EG2R\",\"loading\":\"NewCommentForm_loading__2inMs\",\"control\":\"NewCommentForm_control__3pj-F\",\"actions\":\"NewCommentForm_actions__1wbX_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__1jZhq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__3s2rU\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useEffect, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n  // params can used to access quoteId but would restrict to use in url.\n  // we can use quoteId as a prop value in dependency and make this component more flexible\n\n  // const params = useParams();\n\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { onAddedComment } = props;\n\n  useEffect(() => {\n    if (status === 'completed' && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    const enteredText = commentTextRef.current.value;\n\n    sendRequest({ commentData: { text: enteredText }, quoteId: props.quoteId });\n\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' && (\n        <div className='centered'>\n          <LoadingSpinner />\n        </div>)}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useCallback, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport CommentsList from './CommentsList';\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n\n  const { quoteID } = params;\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  useEffect(\n    () => {\n      sendRequest(quoteID);\n    },\n    [quoteID, sendRequest]\n  );\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(\n    () => {\n      sendRequest(quoteID);\n    },\n    [sendRequest, quoteID]\n  );\n\n  let comments;\n\n  if (status === 'pending') {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (\n    status === 'completed' &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <p className=\"centered\">No Comments Added </p>;\n  }\n\n  if (status === 'completed' && (loadedComments || loadedComments.length > 0)) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm quoteID={quoteID} onAddedComment={addedCommentHandler} />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import { useParams, Route, Link } from 'react-router-dom';\r\nimport { Fragment, useEffect } from 'react';\r\n\r\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\r\nimport Comments from '../components/comments/Comments';\r\nimport useHttp from '../hooks/use-http';\r\nimport { getSingleQuote } from '../lib/api';\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\r\n\r\nconst DUMMY_LIST = [\r\n    { id: 'q1', author: 'Alok', text: 'Good Morning' },\r\n    { id: 'q2', author: 'Prabhakar', text: 'Good Afternoon' }\r\n];\r\n\r\nconst QuoteDetail = () => {\r\n    const params = useParams();\r\n    // const quote = DUMMY_LIST.find(data => data.id === params.quoteId);\r\n\r\n    const { quoteId } = params;\r\n\r\n    const { sendRequest, status, data: loadedQuote, error } = useHttp(getSingleQuote, true);\r\n\r\n    useEffect(() => {\r\n        sendRequest(quoteId);\r\n    }, [sendRequest, quoteId]);\r\n\r\n    if (status === 'pending') {\r\n        return (<div className='centered'><LoadingSpinner /></div>);\r\n    }\r\n\r\n    if (error) {\r\n        return <p className='centered'> {error}</p>;\r\n    }\r\n    if (!loadedQuote.text) {\r\n        return <h2>No Quote Found</h2>;\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <HighlightedQuote author={loadedQuote.author} text={loadedQuote.text} />\r\n            <Route path={`/quote/${params.quoteId}`} exact>\r\n                <div className=\"centered\">\r\n                    <Link className=\"btn--flat\" to={`/quote/${params.quoteId}/comments`}>\r\n                        Load Comments\r\n                    </Link>\r\n                </div>\r\n            </Route>\r\n\r\n            <Route path={`/quote/${params.quoteId}/comments`}>\r\n                <Comments />\r\n            </Route>\r\n        </Fragment>\r\n    );\r\n};\r\nexport default QuoteDetail;\r\n"],"sourceRoot":""}